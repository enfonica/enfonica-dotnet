// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enfonica/messaging/v1/messages.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Enfonica Pty Ltd
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Enfonica.Messaging.V1 {
  /// <summary>
  /// Manages Messages.
  /// Messages can be SMS, whatsapp messages, etc.
  /// </summary>
  public static partial class Messages
  {
    static readonly string __ServiceName = "enfonica.messaging.v1.Messages";

    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.CreateMessageRequest> __Marshaller_enfonica_messaging_v1_CreateMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.CreateMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.Message> __Marshaller_enfonica_messaging_v1_Message = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.Message.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.GetMessageRequest> __Marshaller_enfonica_messaging_v1_GetMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.GetMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.ListMessagesRequest> __Marshaller_enfonica_messaging_v1_ListMessagesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.ListMessagesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.ListMessagesResponse> __Marshaller_enfonica_messaging_v1_ListMessagesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.ListMessagesResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.CreateMessageRequest, global::Enfonica.Messaging.V1.Message> __Method_CreateMessage = new grpc::Method<global::Enfonica.Messaging.V1.CreateMessageRequest, global::Enfonica.Messaging.V1.Message>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateMessage",
        __Marshaller_enfonica_messaging_v1_CreateMessageRequest,
        __Marshaller_enfonica_messaging_v1_Message);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.GetMessageRequest, global::Enfonica.Messaging.V1.Message> __Method_GetMessage = new grpc::Method<global::Enfonica.Messaging.V1.GetMessageRequest, global::Enfonica.Messaging.V1.Message>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMessage",
        __Marshaller_enfonica_messaging_v1_GetMessageRequest,
        __Marshaller_enfonica_messaging_v1_Message);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.ListMessagesRequest, global::Enfonica.Messaging.V1.ListMessagesResponse> __Method_ListMessages = new grpc::Method<global::Enfonica.Messaging.V1.ListMessagesRequest, global::Enfonica.Messaging.V1.ListMessagesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListMessages",
        __Marshaller_enfonica_messaging_v1_ListMessagesRequest,
        __Marshaller_enfonica_messaging_v1_ListMessagesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Enfonica.Messaging.V1.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Messages</summary>
    [grpc::BindServiceMethod(typeof(Messages), "BindService")]
    public abstract partial class MessagesBase
    {
      /// <summary>
      /// Creates a Message and queues it for sending.
      /// Returns the created message.
      ///
      /// The caller must have `messaging.messages.create` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.Message> CreateMessage(global::Enfonica.Messaging.V1.CreateMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a Message identified by the supplied resource name.
      ///
      /// The caller must have `messaging.messages.get` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.Message> GetMessage(global::Enfonica.Messaging.V1.GetMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the Messages of the specified project.
      /// List returns Messages sorted by create_time descending.
      ///
      /// The caller must have `messaging.messages.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.ListMessagesResponse> ListMessages(global::Enfonica.Messaging.V1.ListMessagesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Messages</summary>
    public partial class MessagesClient : grpc::ClientBase<MessagesClient>
    {
      /// <summary>Creates a new client for Messages</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MessagesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Messages that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MessagesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MessagesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MessagesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a Message and queues it for sending.
      /// Returns the created message.
      ///
      /// The caller must have `messaging.messages.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Message CreateMessage(global::Enfonica.Messaging.V1.CreateMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Message and queues it for sending.
      /// Returns the created message.
      ///
      /// The caller must have `messaging.messages.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Message CreateMessage(global::Enfonica.Messaging.V1.CreateMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateMessage, null, options, request);
      }
      /// <summary>
      /// Creates a Message and queues it for sending.
      /// Returns the created message.
      ///
      /// The caller must have `messaging.messages.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Message> CreateMessageAsync(global::Enfonica.Messaging.V1.CreateMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a Message and queues it for sending.
      /// Returns the created message.
      ///
      /// The caller must have `messaging.messages.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Message> CreateMessageAsync(global::Enfonica.Messaging.V1.CreateMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateMessage, null, options, request);
      }
      /// <summary>
      /// Retrieves a Message identified by the supplied resource name.
      ///
      /// The caller must have `messaging.messages.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Message GetMessage(global::Enfonica.Messaging.V1.GetMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Message identified by the supplied resource name.
      ///
      /// The caller must have `messaging.messages.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Message GetMessage(global::Enfonica.Messaging.V1.GetMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMessage, null, options, request);
      }
      /// <summary>
      /// Retrieves a Message identified by the supplied resource name.
      ///
      /// The caller must have `messaging.messages.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Message> GetMessageAsync(global::Enfonica.Messaging.V1.GetMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Message identified by the supplied resource name.
      ///
      /// The caller must have `messaging.messages.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Message> GetMessageAsync(global::Enfonica.Messaging.V1.GetMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMessage, null, options, request);
      }
      /// <summary>
      /// Lists the Messages of the specified project.
      /// List returns Messages sorted by create_time descending.
      ///
      /// The caller must have `messaging.messages.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.ListMessagesResponse ListMessages(global::Enfonica.Messaging.V1.ListMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Messages of the specified project.
      /// List returns Messages sorted by create_time descending.
      ///
      /// The caller must have `messaging.messages.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.ListMessagesResponse ListMessages(global::Enfonica.Messaging.V1.ListMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListMessages, null, options, request);
      }
      /// <summary>
      /// Lists the Messages of the specified project.
      /// List returns Messages sorted by create_time descending.
      ///
      /// The caller must have `messaging.messages.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.ListMessagesResponse> ListMessagesAsync(global::Enfonica.Messaging.V1.ListMessagesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListMessagesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Messages of the specified project.
      /// List returns Messages sorted by create_time descending.
      ///
      /// The caller must have `messaging.messages.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.ListMessagesResponse> ListMessagesAsync(global::Enfonica.Messaging.V1.ListMessagesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListMessages, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MessagesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MessagesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MessagesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateMessage, serviceImpl.CreateMessage)
          .AddMethod(__Method_GetMessage, serviceImpl.GetMessage)
          .AddMethod(__Method_ListMessages, serviceImpl.ListMessages).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MessagesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.CreateMessageRequest, global::Enfonica.Messaging.V1.Message>(serviceImpl.CreateMessage));
      serviceBinder.AddMethod(__Method_GetMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.GetMessageRequest, global::Enfonica.Messaging.V1.Message>(serviceImpl.GetMessage));
      serviceBinder.AddMethod(__Method_ListMessages, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.ListMessagesRequest, global::Enfonica.Messaging.V1.ListMessagesResponse>(serviceImpl.ListMessages));
    }

  }
}
#endregion
