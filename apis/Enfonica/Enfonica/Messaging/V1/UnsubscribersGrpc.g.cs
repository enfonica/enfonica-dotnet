// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enfonica/messaging/v1/unsubscribers.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Enfonica Pty Ltd
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Enfonica.Messaging.V1 {
  /// <summary>
  /// Manages Unsubscribers.
  /// </summary>
  public static partial class Unsubscribers
  {
    static readonly string __ServiceName = "enfonica.messaging.v1.Unsubscribers";

    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.CreateUnsubscriberRequest> __Marshaller_enfonica_messaging_v1_CreateUnsubscriberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.CreateUnsubscriberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.Unsubscriber> __Marshaller_enfonica_messaging_v1_Unsubscriber = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.Unsubscriber.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.GetUnsubscriberRequest> __Marshaller_enfonica_messaging_v1_GetUnsubscriberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.GetUnsubscriberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.ListUnsubscribersRequest> __Marshaller_enfonica_messaging_v1_ListUnsubscribersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.ListUnsubscribersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.ListUnsubscribersResponse> __Marshaller_enfonica_messaging_v1_ListUnsubscribersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.ListUnsubscribersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest> __Marshaller_enfonica_messaging_v1_UpdateUnsubscriberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest> __Marshaller_enfonica_messaging_v1_DeleteUnsubscriberRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.CreateUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber> __Method_CreateUnsubscriber = new grpc::Method<global::Enfonica.Messaging.V1.CreateUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateUnsubscriber",
        __Marshaller_enfonica_messaging_v1_CreateUnsubscriberRequest,
        __Marshaller_enfonica_messaging_v1_Unsubscriber);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.GetUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber> __Method_GetUnsubscriber = new grpc::Method<global::Enfonica.Messaging.V1.GetUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUnsubscriber",
        __Marshaller_enfonica_messaging_v1_GetUnsubscriberRequest,
        __Marshaller_enfonica_messaging_v1_Unsubscriber);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.ListUnsubscribersRequest, global::Enfonica.Messaging.V1.ListUnsubscribersResponse> __Method_ListUnsubscribers = new grpc::Method<global::Enfonica.Messaging.V1.ListUnsubscribersRequest, global::Enfonica.Messaging.V1.ListUnsubscribersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListUnsubscribers",
        __Marshaller_enfonica_messaging_v1_ListUnsubscribersRequest,
        __Marshaller_enfonica_messaging_v1_ListUnsubscribersResponse);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber> __Method_UpdateUnsubscriber = new grpc::Method<global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateUnsubscriber",
        __Marshaller_enfonica_messaging_v1_UpdateUnsubscriberRequest,
        __Marshaller_enfonica_messaging_v1_Unsubscriber);

    static readonly grpc::Method<global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber> __Method_DeleteUnsubscriber = new grpc::Method<global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteUnsubscriber",
        __Marshaller_enfonica_messaging_v1_DeleteUnsubscriberRequest,
        __Marshaller_enfonica_messaging_v1_Unsubscriber);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Enfonica.Messaging.V1.UnsubscribersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Unsubscribers</summary>
    [grpc::BindServiceMethod(typeof(Unsubscribers), "BindService")]
    public abstract partial class UnsubscribersBase
    {
      /// <summary>
      /// Creates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.create` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.Unsubscriber> CreateUnsubscriber(global::Enfonica.Messaging.V1.CreateUnsubscriberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a Unsubscriber identified by the supplied resource name.
      ///
      /// The caller must have `messaging.unsubscribers.get` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.Unsubscriber> GetUnsubscriber(global::Enfonica.Messaging.V1.GetUnsubscriberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the Unsubscribers of the specified project.
      /// List returns Unsubscribers sorted by create_time descending.
      ///
      /// The caller must have `messaging.unsubscribers.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.ListUnsubscribersResponse> ListUnsubscribers(global::Enfonica.Messaging.V1.ListUnsubscribersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.update` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.Unsubscriber> UpdateUnsubscriber(global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Messaging.V1.Unsubscriber> DeleteUnsubscriber(global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Unsubscribers</summary>
    public partial class UnsubscribersClient : grpc::ClientBase<UnsubscribersClient>
    {
      /// <summary>Creates a new client for Unsubscribers</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UnsubscribersClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Unsubscribers that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UnsubscribersClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UnsubscribersClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UnsubscribersClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber CreateUnsubscriber(global::Enfonica.Messaging.V1.CreateUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUnsubscriber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber CreateUnsubscriber(global::Enfonica.Messaging.V1.CreateUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Creates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> CreateUnsubscriberAsync(global::Enfonica.Messaging.V1.CreateUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateUnsubscriberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> CreateUnsubscriberAsync(global::Enfonica.Messaging.V1.CreateUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Retrieves a Unsubscriber identified by the supplied resource name.
      ///
      /// The caller must have `messaging.unsubscribers.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber GetUnsubscriber(global::Enfonica.Messaging.V1.GetUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUnsubscriber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Unsubscriber identified by the supplied resource name.
      ///
      /// The caller must have `messaging.unsubscribers.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber GetUnsubscriber(global::Enfonica.Messaging.V1.GetUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Retrieves a Unsubscriber identified by the supplied resource name.
      ///
      /// The caller must have `messaging.unsubscribers.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> GetUnsubscriberAsync(global::Enfonica.Messaging.V1.GetUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUnsubscriberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Unsubscriber identified by the supplied resource name.
      ///
      /// The caller must have `messaging.unsubscribers.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> GetUnsubscriberAsync(global::Enfonica.Messaging.V1.GetUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Lists the Unsubscribers of the specified project.
      /// List returns Unsubscribers sorted by create_time descending.
      ///
      /// The caller must have `messaging.unsubscribers.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.ListUnsubscribersResponse ListUnsubscribers(global::Enfonica.Messaging.V1.ListUnsubscribersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUnsubscribers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Unsubscribers of the specified project.
      /// List returns Unsubscribers sorted by create_time descending.
      ///
      /// The caller must have `messaging.unsubscribers.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.ListUnsubscribersResponse ListUnsubscribers(global::Enfonica.Messaging.V1.ListUnsubscribersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListUnsubscribers, null, options, request);
      }
      /// <summary>
      /// Lists the Unsubscribers of the specified project.
      /// List returns Unsubscribers sorted by create_time descending.
      ///
      /// The caller must have `messaging.unsubscribers.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.ListUnsubscribersResponse> ListUnsubscribersAsync(global::Enfonica.Messaging.V1.ListUnsubscribersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListUnsubscribersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Unsubscribers of the specified project.
      /// List returns Unsubscribers sorted by create_time descending.
      ///
      /// The caller must have `messaging.unsubscribers.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.ListUnsubscribersResponse> ListUnsubscribersAsync(global::Enfonica.Messaging.V1.ListUnsubscribersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListUnsubscribers, null, options, request);
      }
      /// <summary>
      /// Updates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber UpdateUnsubscriber(global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUnsubscriber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber UpdateUnsubscriber(global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Updates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> UpdateUnsubscriberAsync(global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateUnsubscriberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> UpdateUnsubscriberAsync(global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Deletes an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber DeleteUnsubscriber(global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUnsubscriber(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Messaging.V1.Unsubscriber DeleteUnsubscriber(global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteUnsubscriber, null, options, request);
      }
      /// <summary>
      /// Deletes an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> DeleteUnsubscriberAsync(global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteUnsubscriberAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes an unsubscriber.
      ///
      /// The caller must have `messaging.unsubscribers.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Messaging.V1.Unsubscriber> DeleteUnsubscriberAsync(global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteUnsubscriber, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UnsubscribersClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UnsubscribersClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UnsubscribersBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateUnsubscriber, serviceImpl.CreateUnsubscriber)
          .AddMethod(__Method_GetUnsubscriber, serviceImpl.GetUnsubscriber)
          .AddMethod(__Method_ListUnsubscribers, serviceImpl.ListUnsubscribers)
          .AddMethod(__Method_UpdateUnsubscriber, serviceImpl.UpdateUnsubscriber)
          .AddMethod(__Method_DeleteUnsubscriber, serviceImpl.DeleteUnsubscriber).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UnsubscribersBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateUnsubscriber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.CreateUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(serviceImpl.CreateUnsubscriber));
      serviceBinder.AddMethod(__Method_GetUnsubscriber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.GetUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(serviceImpl.GetUnsubscriber));
      serviceBinder.AddMethod(__Method_ListUnsubscribers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.ListUnsubscribersRequest, global::Enfonica.Messaging.V1.ListUnsubscribersResponse>(serviceImpl.ListUnsubscribers));
      serviceBinder.AddMethod(__Method_UpdateUnsubscriber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.UpdateUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(serviceImpl.UpdateUnsubscriber));
      serviceBinder.AddMethod(__Method_DeleteUnsubscriber, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Messaging.V1.DeleteUnsubscriberRequest, global::Enfonica.Messaging.V1.Unsubscriber>(serviceImpl.DeleteUnsubscriber));
    }

  }
}
#endregion
