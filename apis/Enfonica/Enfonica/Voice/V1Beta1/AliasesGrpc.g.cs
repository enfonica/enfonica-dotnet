// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enfonica/voice/v1beta1/aliases.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Enfonica Pty Ltd
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Enfonica.Voice.V1Beta1 {
  /// <summary>
  /// Manages SIP aliases.
  /// </summary>
  public static partial class Aliases
  {
    static readonly string __ServiceName = "enfonica.voice.v1beta1.Aliases";

    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.CreateAliasRequest> __Marshaller_enfonica_voice_v1beta1_CreateAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.CreateAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.Alias> __Marshaller_enfonica_voice_v1beta1_Alias = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.Alias.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.GetAliasRequest> __Marshaller_enfonica_voice_v1beta1_GetAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.GetAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.ListAliasesRequest> __Marshaller_enfonica_voice_v1beta1_ListAliasesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.ListAliasesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.ListAliasesResponse> __Marshaller_enfonica_voice_v1beta1_ListAliasesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.ListAliasesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.UpdateAliasRequest> __Marshaller_enfonica_voice_v1beta1_UpdateAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.UpdateAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.DeleteAliasRequest> __Marshaller_enfonica_voice_v1beta1_DeleteAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.DeleteAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.CreateAliasRequest, global::Enfonica.Voice.V1Beta1.Alias> __Method_CreateAlias = new grpc::Method<global::Enfonica.Voice.V1Beta1.CreateAliasRequest, global::Enfonica.Voice.V1Beta1.Alias>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateAlias",
        __Marshaller_enfonica_voice_v1beta1_CreateAliasRequest,
        __Marshaller_enfonica_voice_v1beta1_Alias);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.GetAliasRequest, global::Enfonica.Voice.V1Beta1.Alias> __Method_GetAlias = new grpc::Method<global::Enfonica.Voice.V1Beta1.GetAliasRequest, global::Enfonica.Voice.V1Beta1.Alias>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAlias",
        __Marshaller_enfonica_voice_v1beta1_GetAliasRequest,
        __Marshaller_enfonica_voice_v1beta1_Alias);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.ListAliasesRequest, global::Enfonica.Voice.V1Beta1.ListAliasesResponse> __Method_ListAliases = new grpc::Method<global::Enfonica.Voice.V1Beta1.ListAliasesRequest, global::Enfonica.Voice.V1Beta1.ListAliasesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAliases",
        __Marshaller_enfonica_voice_v1beta1_ListAliasesRequest,
        __Marshaller_enfonica_voice_v1beta1_ListAliasesResponse);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.UpdateAliasRequest, global::Enfonica.Voice.V1Beta1.Alias> __Method_UpdateAlias = new grpc::Method<global::Enfonica.Voice.V1Beta1.UpdateAliasRequest, global::Enfonica.Voice.V1Beta1.Alias>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateAlias",
        __Marshaller_enfonica_voice_v1beta1_UpdateAliasRequest,
        __Marshaller_enfonica_voice_v1beta1_Alias);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.DeleteAliasRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteAlias = new grpc::Method<global::Enfonica.Voice.V1Beta1.DeleteAliasRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteAlias",
        __Marshaller_enfonica_voice_v1beta1_DeleteAliasRequest,
        __Marshaller_google_protobuf_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Enfonica.Voice.V1Beta1.AliasesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Aliases</summary>
    [grpc::BindServiceMethod(typeof(Aliases), "BindService")]
    public abstract partial class AliasesBase
    {
      /// <summary>
      /// Creates a alias.
      ///
      /// The caller must have `voice.aliases.create` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.Alias> CreateAlias(global::Enfonica.Voice.V1Beta1.CreateAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a alias identified by the supplied resource name.
      ///
      /// The caller must have `voice.aliases.get` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.Alias> GetAlias(global::Enfonica.Voice.V1Beta1.GetAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all Aliases.
      /// List returns alias sorted by create_time descending.
      ///
      /// The caller must have `voice.aliases.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.ListAliasesResponse> ListAliases(global::Enfonica.Voice.V1Beta1.ListAliasesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a alias.
      ///
      /// The caller must have `voice.aliases.update` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.Alias> UpdateAlias(global::Enfonica.Voice.V1Beta1.UpdateAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes the specified alias.
      ///
      /// The caller must have `voice.aliases.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAlias(global::Enfonica.Voice.V1Beta1.DeleteAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Aliases</summary>
    public partial class AliasesClient : grpc::ClientBase<AliasesClient>
    {
      /// <summary>Creates a new client for Aliases</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AliasesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Aliases that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AliasesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AliasesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AliasesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a alias.
      ///
      /// The caller must have `voice.aliases.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Alias CreateAlias(global::Enfonica.Voice.V1Beta1.CreateAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a alias.
      ///
      /// The caller must have `voice.aliases.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Alias CreateAlias(global::Enfonica.Voice.V1Beta1.CreateAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateAlias, null, options, request);
      }
      /// <summary>
      /// Creates a alias.
      ///
      /// The caller must have `voice.aliases.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Alias> CreateAliasAsync(global::Enfonica.Voice.V1Beta1.CreateAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a alias.
      ///
      /// The caller must have `voice.aliases.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Alias> CreateAliasAsync(global::Enfonica.Voice.V1Beta1.CreateAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateAlias, null, options, request);
      }
      /// <summary>
      /// Retrieves a alias identified by the supplied resource name.
      ///
      /// The caller must have `voice.aliases.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Alias GetAlias(global::Enfonica.Voice.V1Beta1.GetAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a alias identified by the supplied resource name.
      ///
      /// The caller must have `voice.aliases.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Alias GetAlias(global::Enfonica.Voice.V1Beta1.GetAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAlias, null, options, request);
      }
      /// <summary>
      /// Retrieves a alias identified by the supplied resource name.
      ///
      /// The caller must have `voice.aliases.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Alias> GetAliasAsync(global::Enfonica.Voice.V1Beta1.GetAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a alias identified by the supplied resource name.
      ///
      /// The caller must have `voice.aliases.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Alias> GetAliasAsync(global::Enfonica.Voice.V1Beta1.GetAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAlias, null, options, request);
      }
      /// <summary>
      /// Lists all Aliases.
      /// List returns alias sorted by create_time descending.
      ///
      /// The caller must have `voice.aliases.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.ListAliasesResponse ListAliases(global::Enfonica.Voice.V1Beta1.ListAliasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAliases(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all Aliases.
      /// List returns alias sorted by create_time descending.
      ///
      /// The caller must have `voice.aliases.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.ListAliasesResponse ListAliases(global::Enfonica.Voice.V1Beta1.ListAliasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAliases, null, options, request);
      }
      /// <summary>
      /// Lists all Aliases.
      /// List returns alias sorted by create_time descending.
      ///
      /// The caller must have `voice.aliases.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.ListAliasesResponse> ListAliasesAsync(global::Enfonica.Voice.V1Beta1.ListAliasesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAliasesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all Aliases.
      /// List returns alias sorted by create_time descending.
      ///
      /// The caller must have `voice.aliases.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.ListAliasesResponse> ListAliasesAsync(global::Enfonica.Voice.V1Beta1.ListAliasesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAliases, null, options, request);
      }
      /// <summary>
      /// Updates a alias.
      ///
      /// The caller must have `voice.aliases.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Alias UpdateAlias(global::Enfonica.Voice.V1Beta1.UpdateAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a alias.
      ///
      /// The caller must have `voice.aliases.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Alias UpdateAlias(global::Enfonica.Voice.V1Beta1.UpdateAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateAlias, null, options, request);
      }
      /// <summary>
      /// Updates a alias.
      ///
      /// The caller must have `voice.aliases.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Alias> UpdateAliasAsync(global::Enfonica.Voice.V1Beta1.UpdateAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a alias.
      ///
      /// The caller must have `voice.aliases.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Alias> UpdateAliasAsync(global::Enfonica.Voice.V1Beta1.UpdateAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateAlias, null, options, request);
      }
      /// <summary>
      /// Deletes the specified alias.
      ///
      /// The caller must have `voice.aliases.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAlias(global::Enfonica.Voice.V1Beta1.DeleteAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified alias.
      ///
      /// The caller must have `voice.aliases.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteAlias(global::Enfonica.Voice.V1Beta1.DeleteAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteAlias, null, options, request);
      }
      /// <summary>
      /// Deletes the specified alias.
      ///
      /// The caller must have `voice.aliases.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAliasAsync(global::Enfonica.Voice.V1Beta1.DeleteAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes the specified alias.
      ///
      /// The caller must have `voice.aliases.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteAliasAsync(global::Enfonica.Voice.V1Beta1.DeleteAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteAlias, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AliasesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AliasesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AliasesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateAlias, serviceImpl.CreateAlias)
          .AddMethod(__Method_GetAlias, serviceImpl.GetAlias)
          .AddMethod(__Method_ListAliases, serviceImpl.ListAliases)
          .AddMethod(__Method_UpdateAlias, serviceImpl.UpdateAlias)
          .AddMethod(__Method_DeleteAlias, serviceImpl.DeleteAlias).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AliasesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.CreateAliasRequest, global::Enfonica.Voice.V1Beta1.Alias>(serviceImpl.CreateAlias));
      serviceBinder.AddMethod(__Method_GetAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.GetAliasRequest, global::Enfonica.Voice.V1Beta1.Alias>(serviceImpl.GetAlias));
      serviceBinder.AddMethod(__Method_ListAliases, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.ListAliasesRequest, global::Enfonica.Voice.V1Beta1.ListAliasesResponse>(serviceImpl.ListAliases));
      serviceBinder.AddMethod(__Method_UpdateAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.UpdateAliasRequest, global::Enfonica.Voice.V1Beta1.Alias>(serviceImpl.UpdateAlias));
      serviceBinder.AddMethod(__Method_DeleteAlias, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.DeleteAliasRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteAlias));
    }

  }
}
#endregion
