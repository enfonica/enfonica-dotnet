// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enfonica/voice/v1beta1/calls.proto
// </auto-generated>
// Original file comments:
// Copyright 2020 Enfonica Pty Ltd
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Enfonica.Voice.V1Beta1 {
  /// <summary>
  /// Manages Calls.
  /// </summary>
  public static partial class Calls
  {
    static readonly string __ServiceName = "enfonica.voice.v1beta1.Calls";

    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.CreateCallRequest> __Marshaller_enfonica_voice_v1beta1_CreateCallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.CreateCallRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.Call> __Marshaller_enfonica_voice_v1beta1_Call = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.Call.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.GetCallRequest> __Marshaller_enfonica_voice_v1beta1_GetCallRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.GetCallRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.ListCallsRequest> __Marshaller_enfonica_voice_v1beta1_ListCallsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.ListCallsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.ListCallsResponse> __Marshaller_enfonica_voice_v1beta1_ListCallsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.ListCallsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.CreateCallRequest, global::Enfonica.Voice.V1Beta1.Call> __Method_CreateCall = new grpc::Method<global::Enfonica.Voice.V1Beta1.CreateCallRequest, global::Enfonica.Voice.V1Beta1.Call>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateCall",
        __Marshaller_enfonica_voice_v1beta1_CreateCallRequest,
        __Marshaller_enfonica_voice_v1beta1_Call);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.GetCallRequest, global::Enfonica.Voice.V1Beta1.Call> __Method_GetCall = new grpc::Method<global::Enfonica.Voice.V1Beta1.GetCallRequest, global::Enfonica.Voice.V1Beta1.Call>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCall",
        __Marshaller_enfonica_voice_v1beta1_GetCallRequest,
        __Marshaller_enfonica_voice_v1beta1_Call);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.ListCallsRequest, global::Enfonica.Voice.V1Beta1.ListCallsResponse> __Method_ListCalls = new grpc::Method<global::Enfonica.Voice.V1Beta1.ListCallsRequest, global::Enfonica.Voice.V1Beta1.ListCallsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListCalls",
        __Marshaller_enfonica_voice_v1beta1_ListCallsRequest,
        __Marshaller_enfonica_voice_v1beta1_ListCallsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Enfonica.Voice.V1Beta1.CallsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Calls</summary>
    [grpc::BindServiceMethod(typeof(Calls), "BindService")]
    public abstract partial class CallsBase
    {
      /// <summary>
      /// Creates a call in the state QUEUED. This will cause an outgoing call
      /// to be started.
      ///
      /// The caller must have `voice.calls.create` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.Call> CreateCall(global::Enfonica.Voice.V1Beta1.CreateCallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a Call identified by the supplied resource name.
      ///
      /// The caller must have `voice.calls.get` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.Call> GetCall(global::Enfonica.Voice.V1Beta1.GetCallRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists the Calls of the specified project.
      /// List returns Calls sorted by create_time descending.
      ///
      /// The caller must have `voice.calls.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.ListCallsResponse> ListCalls(global::Enfonica.Voice.V1Beta1.ListCallsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Calls</summary>
    public partial class CallsClient : grpc::ClientBase<CallsClient>
    {
      /// <summary>Creates a new client for Calls</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CallsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Calls that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CallsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CallsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CallsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a call in the state QUEUED. This will cause an outgoing call
      /// to be started.
      ///
      /// The caller must have `voice.calls.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Call CreateCall(global::Enfonica.Voice.V1Beta1.CreateCallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCall(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a call in the state QUEUED. This will cause an outgoing call
      /// to be started.
      ///
      /// The caller must have `voice.calls.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Call CreateCall(global::Enfonica.Voice.V1Beta1.CreateCallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateCall, null, options, request);
      }
      /// <summary>
      /// Creates a call in the state QUEUED. This will cause an outgoing call
      /// to be started.
      ///
      /// The caller must have `voice.calls.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Call> CreateCallAsync(global::Enfonica.Voice.V1Beta1.CreateCallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCallAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a call in the state QUEUED. This will cause an outgoing call
      /// to be started.
      ///
      /// The caller must have `voice.calls.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Call> CreateCallAsync(global::Enfonica.Voice.V1Beta1.CreateCallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateCall, null, options, request);
      }
      /// <summary>
      /// Retrieves a Call identified by the supplied resource name.
      ///
      /// The caller must have `voice.calls.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Call GetCall(global::Enfonica.Voice.V1Beta1.GetCallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCall(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Call identified by the supplied resource name.
      ///
      /// The caller must have `voice.calls.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.Call GetCall(global::Enfonica.Voice.V1Beta1.GetCallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCall, null, options, request);
      }
      /// <summary>
      /// Retrieves a Call identified by the supplied resource name.
      ///
      /// The caller must have `voice.calls.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Call> GetCallAsync(global::Enfonica.Voice.V1Beta1.GetCallRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCallAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Call identified by the supplied resource name.
      ///
      /// The caller must have `voice.calls.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.Call> GetCallAsync(global::Enfonica.Voice.V1Beta1.GetCallRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCall, null, options, request);
      }
      /// <summary>
      /// Lists the Calls of the specified project.
      /// List returns Calls sorted by create_time descending.
      ///
      /// The caller must have `voice.calls.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.ListCallsResponse ListCalls(global::Enfonica.Voice.V1Beta1.ListCallsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCalls(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Calls of the specified project.
      /// List returns Calls sorted by create_time descending.
      ///
      /// The caller must have `voice.calls.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.ListCallsResponse ListCalls(global::Enfonica.Voice.V1Beta1.ListCallsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListCalls, null, options, request);
      }
      /// <summary>
      /// Lists the Calls of the specified project.
      /// List returns Calls sorted by create_time descending.
      ///
      /// The caller must have `voice.calls.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.ListCallsResponse> ListCallsAsync(global::Enfonica.Voice.V1Beta1.ListCallsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListCallsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists the Calls of the specified project.
      /// List returns Calls sorted by create_time descending.
      ///
      /// The caller must have `voice.calls.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.ListCallsResponse> ListCallsAsync(global::Enfonica.Voice.V1Beta1.ListCallsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListCalls, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CallsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CallsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CallsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateCall, serviceImpl.CreateCall)
          .AddMethod(__Method_GetCall, serviceImpl.GetCall)
          .AddMethod(__Method_ListCalls, serviceImpl.ListCalls).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CallsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateCall, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.CreateCallRequest, global::Enfonica.Voice.V1Beta1.Call>(serviceImpl.CreateCall));
      serviceBinder.AddMethod(__Method_GetCall, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.GetCallRequest, global::Enfonica.Voice.V1Beta1.Call>(serviceImpl.GetCall));
      serviceBinder.AddMethod(__Method_ListCalls, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.ListCallsRequest, global::Enfonica.Voice.V1Beta1.ListCallsResponse>(serviceImpl.ListCalls));
    }

  }
}
#endregion
