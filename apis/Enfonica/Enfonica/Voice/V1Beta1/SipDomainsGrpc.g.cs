// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enfonica/voice/v1beta1/sip_domains.proto
// </auto-generated>
// Original file comments:
// Copyright 2021 Enfonica Pty Ltd
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Enfonica.Voice.V1Beta1 {
  /// <summary>
  /// Manages SIP Domains.
  /// </summary>
  public static partial class SipDomains
  {
    static readonly string __ServiceName = "enfonica.voice.v1beta1.SipDomains";

    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest> __Marshaller_enfonica_voice_v1beta1_CreateSipDomainRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.SipDomain> __Marshaller_enfonica_voice_v1beta1_SipDomain = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.SipDomain.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.GetSipDomainRequest> __Marshaller_enfonica_voice_v1beta1_GetSipDomainRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.GetSipDomainRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest> __Marshaller_enfonica_voice_v1beta1_ListSipDomainsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse> __Marshaller_enfonica_voice_v1beta1_ListSipDomainsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest> __Marshaller_enfonica_voice_v1beta1_UpdateSipDomainRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest> __Marshaller_enfonica_voice_v1beta1_DeleteSipDomainRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain> __Method_CreateSipDomain = new grpc::Method<global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSipDomain",
        __Marshaller_enfonica_voice_v1beta1_CreateSipDomainRequest,
        __Marshaller_enfonica_voice_v1beta1_SipDomain);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.GetSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain> __Method_GetSipDomain = new grpc::Method<global::Enfonica.Voice.V1Beta1.GetSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSipDomain",
        __Marshaller_enfonica_voice_v1beta1_GetSipDomainRequest,
        __Marshaller_enfonica_voice_v1beta1_SipDomain);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest, global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse> __Method_ListSipDomains = new grpc::Method<global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest, global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSipDomains",
        __Marshaller_enfonica_voice_v1beta1_ListSipDomainsRequest,
        __Marshaller_enfonica_voice_v1beta1_ListSipDomainsResponse);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain> __Method_UpdateSipDomain = new grpc::Method<global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSipDomain",
        __Marshaller_enfonica_voice_v1beta1_UpdateSipDomainRequest,
        __Marshaller_enfonica_voice_v1beta1_SipDomain);

    static readonly grpc::Method<global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain> __Method_DeleteSipDomain = new grpc::Method<global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSipDomain",
        __Marshaller_enfonica_voice_v1beta1_DeleteSipDomainRequest,
        __Marshaller_enfonica_voice_v1beta1_SipDomain);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Enfonica.Voice.V1Beta1.SipDomainsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SipDomains</summary>
    [grpc::BindServiceMethod(typeof(SipDomains), "BindService")]
    public abstract partial class SipDomainsBase
    {
      /// <summary>
      /// Creates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.create` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.SipDomain> CreateSipDomain(global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a sip domain identified by the supplied resource name.
      ///
      /// The caller must have `voice.sipDomains.get` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.SipDomain> GetSipDomain(global::Enfonica.Voice.V1Beta1.GetSipDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all SipDomains.
      /// List returns sip domain sorted by create_time descending.
      ///
      /// The caller must have `voice.sipDomains.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse> ListSipDomains(global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.update` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.SipDomain> UpdateSipDomain(global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Performs a soft-delete of the specified SIP domain.
      ///
      /// The caller must have `voice.sipDomains.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Voice.V1Beta1.SipDomain> DeleteSipDomain(global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SipDomains</summary>
    public partial class SipDomainsClient : grpc::ClientBase<SipDomainsClient>
    {
      /// <summary>Creates a new client for SipDomains</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SipDomainsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SipDomains that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SipDomainsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SipDomainsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SipDomainsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain CreateSipDomain(global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSipDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain CreateSipDomain(global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSipDomain, null, options, request);
      }
      /// <summary>
      /// Creates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> CreateSipDomainAsync(global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSipDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> CreateSipDomainAsync(global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSipDomain, null, options, request);
      }
      /// <summary>
      /// Retrieves a sip domain identified by the supplied resource name.
      ///
      /// The caller must have `voice.sipDomains.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain GetSipDomain(global::Enfonica.Voice.V1Beta1.GetSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSipDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a sip domain identified by the supplied resource name.
      ///
      /// The caller must have `voice.sipDomains.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain GetSipDomain(global::Enfonica.Voice.V1Beta1.GetSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSipDomain, null, options, request);
      }
      /// <summary>
      /// Retrieves a sip domain identified by the supplied resource name.
      ///
      /// The caller must have `voice.sipDomains.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> GetSipDomainAsync(global::Enfonica.Voice.V1Beta1.GetSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSipDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a sip domain identified by the supplied resource name.
      ///
      /// The caller must have `voice.sipDomains.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> GetSipDomainAsync(global::Enfonica.Voice.V1Beta1.GetSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSipDomain, null, options, request);
      }
      /// <summary>
      /// Lists all SipDomains.
      /// List returns sip domain sorted by create_time descending.
      ///
      /// The caller must have `voice.sipDomains.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse ListSipDomains(global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSipDomains(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all SipDomains.
      /// List returns sip domain sorted by create_time descending.
      ///
      /// The caller must have `voice.sipDomains.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse ListSipDomains(global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSipDomains, null, options, request);
      }
      /// <summary>
      /// Lists all SipDomains.
      /// List returns sip domain sorted by create_time descending.
      ///
      /// The caller must have `voice.sipDomains.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse> ListSipDomainsAsync(global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSipDomainsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all SipDomains.
      /// List returns sip domain sorted by create_time descending.
      ///
      /// The caller must have `voice.sipDomains.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse> ListSipDomainsAsync(global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSipDomains, null, options, request);
      }
      /// <summary>
      /// Updates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain UpdateSipDomain(global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSipDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain UpdateSipDomain(global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSipDomain, null, options, request);
      }
      /// <summary>
      /// Updates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> UpdateSipDomainAsync(global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSipDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a sip domain.
      ///
      /// The caller must have `voice.sipDomains.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> UpdateSipDomainAsync(global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSipDomain, null, options, request);
      }
      /// <summary>
      /// Performs a soft-delete of the specified SIP domain.
      ///
      /// The caller must have `voice.sipDomains.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain DeleteSipDomain(global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSipDomain(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a soft-delete of the specified SIP domain.
      ///
      /// The caller must have `voice.sipDomains.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Voice.V1Beta1.SipDomain DeleteSipDomain(global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSipDomain, null, options, request);
      }
      /// <summary>
      /// Performs a soft-delete of the specified SIP domain.
      ///
      /// The caller must have `voice.sipDomains.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> DeleteSipDomainAsync(global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSipDomainAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Performs a soft-delete of the specified SIP domain.
      ///
      /// The caller must have `voice.sipDomains.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Voice.V1Beta1.SipDomain> DeleteSipDomainAsync(global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSipDomain, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SipDomainsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SipDomainsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SipDomainsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateSipDomain, serviceImpl.CreateSipDomain)
          .AddMethod(__Method_GetSipDomain, serviceImpl.GetSipDomain)
          .AddMethod(__Method_ListSipDomains, serviceImpl.ListSipDomains)
          .AddMethod(__Method_UpdateSipDomain, serviceImpl.UpdateSipDomain)
          .AddMethod(__Method_DeleteSipDomain, serviceImpl.DeleteSipDomain).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SipDomainsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateSipDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.CreateSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(serviceImpl.CreateSipDomain));
      serviceBinder.AddMethod(__Method_GetSipDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.GetSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(serviceImpl.GetSipDomain));
      serviceBinder.AddMethod(__Method_ListSipDomains, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.ListSipDomainsRequest, global::Enfonica.Voice.V1Beta1.ListSipDomainsResponse>(serviceImpl.ListSipDomains));
      serviceBinder.AddMethod(__Method_UpdateSipDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.UpdateSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(serviceImpl.UpdateSipDomain));
      serviceBinder.AddMethod(__Method_DeleteSipDomain, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Voice.V1Beta1.DeleteSipDomainRequest, global::Enfonica.Voice.V1Beta1.SipDomain>(serviceImpl.DeleteSipDomain));
    }

  }
}
#endregion
