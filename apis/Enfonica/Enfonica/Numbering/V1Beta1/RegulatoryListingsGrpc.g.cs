// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: enfonica/numbering/v1beta1/regulatory_listings.proto
// </auto-generated>
// Original file comments:
// Copyright 2022 Enfonica Pty Ltd
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Enfonica.Numbering.V1Beta1 {
  /// <summary>
  /// Manages regulatory listings.
  /// </summary>
  public static partial class RegulatoryListings
  {
    static readonly string __ServiceName = "enfonica.numbering.v1beta1.RegulatoryListings";

    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest> __Marshaller_enfonica_numbering_v1beta1_CreateRegulatoryListingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> __Marshaller_enfonica_numbering_v1beta1_RegulatoryListing = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.RegulatoryListing.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest> __Marshaller_enfonica_numbering_v1beta1_GetRegulatoryListingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest> __Marshaller_enfonica_numbering_v1beta1_ListRegulatoryListingsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse> __Marshaller_enfonica_numbering_v1beta1_ListRegulatoryListingsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest> __Marshaller_enfonica_numbering_v1beta1_UpdateRegulatoryListingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest> __Marshaller_enfonica_numbering_v1beta1_DeleteRegulatoryListingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest> __Marshaller_enfonica_numbering_v1beta1_SearchRegulatoryListingsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse> __Marshaller_enfonica_numbering_v1beta1_SearchRegulatoryListingsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing> __Method_CreateRegulatoryListing = new grpc::Method<global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRegulatoryListing",
        __Marshaller_enfonica_numbering_v1beta1_CreateRegulatoryListingRequest,
        __Marshaller_enfonica_numbering_v1beta1_RegulatoryListing);

    static readonly grpc::Method<global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing> __Method_GetRegulatoryListing = new grpc::Method<global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRegulatoryListing",
        __Marshaller_enfonica_numbering_v1beta1_GetRegulatoryListingRequest,
        __Marshaller_enfonica_numbering_v1beta1_RegulatoryListing);

    static readonly grpc::Method<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest, global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse> __Method_ListRegulatoryListings = new grpc::Method<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest, global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListRegulatoryListings",
        __Marshaller_enfonica_numbering_v1beta1_ListRegulatoryListingsRequest,
        __Marshaller_enfonica_numbering_v1beta1_ListRegulatoryListingsResponse);

    static readonly grpc::Method<global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing> __Method_UpdateRegulatoryListing = new grpc::Method<global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRegulatoryListing",
        __Marshaller_enfonica_numbering_v1beta1_UpdateRegulatoryListingRequest,
        __Marshaller_enfonica_numbering_v1beta1_RegulatoryListing);

    static readonly grpc::Method<global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteRegulatoryListing = new grpc::Method<global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRegulatoryListing",
        __Marshaller_enfonica_numbering_v1beta1_DeleteRegulatoryListingRequest,
        __Marshaller_google_protobuf_Empty);

    static readonly grpc::Method<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest, global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse> __Method_SearchRegulatoryListings = new grpc::Method<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest, global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SearchRegulatoryListings",
        __Marshaller_enfonica_numbering_v1beta1_SearchRegulatoryListingsRequest,
        __Marshaller_enfonica_numbering_v1beta1_SearchRegulatoryListingsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Enfonica.Numbering.V1Beta1.RegulatoryListingsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RegulatoryListings</summary>
    [grpc::BindServiceMethod(typeof(RegulatoryListings), "BindService")]
    public abstract partial class RegulatoryListingsBase
    {
      /// <summary>
      /// Creates a regulatory listing.
      ///
      /// By creating a regulatory listing, you acknowledge that the person or entity
      /// located at the specified address is the only party that will be utilizing
      /// phone numbers associated with this regulatory listing. You acknowledge that
      /// Enfonica may process the information provided for the purpose of identity
      /// verification, and will share this information with local telecommunications
      /// providers or authorities where required by local law. You understand that
      /// Enfonica phone numbers may be taken out of service if inaccurate or false
      /// information has been provided.
      ///
      /// The caller must have `numbering.regulatoryListings.create` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> CreateRegulatoryListing(global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.get` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> GetRegulatoryListing(global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists all regulatory listings.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse> ListRegulatoryListings(global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Updates a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.update` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> UpdateRegulatoryListing(global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Deletes a regulatory listing. Regulatory listings that are associated with
      /// an active phone number instance cannot be deleted.
      ///
      /// The caller must have `numbering.regulatoryListings.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRegulatoryListing(global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Searches all usable regulatory listings with the specified number type.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse> SearchRegulatoryListings(global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RegulatoryListings</summary>
    public partial class RegulatoryListingsClient : grpc::ClientBase<RegulatoryListingsClient>
    {
      /// <summary>Creates a new client for RegulatoryListings</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RegulatoryListingsClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RegulatoryListings that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RegulatoryListingsClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RegulatoryListingsClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RegulatoryListingsClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Creates a regulatory listing.
      ///
      /// By creating a regulatory listing, you acknowledge that the person or entity
      /// located at the specified address is the only party that will be utilizing
      /// phone numbers associated with this regulatory listing. You acknowledge that
      /// Enfonica may process the information provided for the purpose of identity
      /// verification, and will share this information with local telecommunications
      /// providers or authorities where required by local law. You understand that
      /// Enfonica phone numbers may be taken out of service if inaccurate or false
      /// information has been provided.
      ///
      /// The caller must have `numbering.regulatoryListings.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.RegulatoryListing CreateRegulatoryListing(global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRegulatoryListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a regulatory listing.
      ///
      /// By creating a regulatory listing, you acknowledge that the person or entity
      /// located at the specified address is the only party that will be utilizing
      /// phone numbers associated with this regulatory listing. You acknowledge that
      /// Enfonica may process the information provided for the purpose of identity
      /// verification, and will share this information with local telecommunications
      /// providers or authorities where required by local law. You understand that
      /// Enfonica phone numbers may be taken out of service if inaccurate or false
      /// information has been provided.
      ///
      /// The caller must have `numbering.regulatoryListings.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.RegulatoryListing CreateRegulatoryListing(global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Creates a regulatory listing.
      ///
      /// By creating a regulatory listing, you acknowledge that the person or entity
      /// located at the specified address is the only party that will be utilizing
      /// phone numbers associated with this regulatory listing. You acknowledge that
      /// Enfonica may process the information provided for the purpose of identity
      /// verification, and will share this information with local telecommunications
      /// providers or authorities where required by local law. You understand that
      /// Enfonica phone numbers may be taken out of service if inaccurate or false
      /// information has been provided.
      ///
      /// The caller must have `numbering.regulatoryListings.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> CreateRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRegulatoryListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a regulatory listing.
      ///
      /// By creating a regulatory listing, you acknowledge that the person or entity
      /// located at the specified address is the only party that will be utilizing
      /// phone numbers associated with this regulatory listing. You acknowledge that
      /// Enfonica may process the information provided for the purpose of identity
      /// verification, and will share this information with local telecommunications
      /// providers or authorities where required by local law. You understand that
      /// Enfonica phone numbers may be taken out of service if inaccurate or false
      /// information has been provided.
      ///
      /// The caller must have `numbering.regulatoryListings.create` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> CreateRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Retrieves a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.RegulatoryListing GetRegulatoryListing(global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegulatoryListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.RegulatoryListing GetRegulatoryListing(global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Retrieves a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> GetRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRegulatoryListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.get` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> GetRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Lists all regulatory listings.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse ListRegulatoryListings(global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRegulatoryListings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all regulatory listings.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse ListRegulatoryListings(global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListRegulatoryListings, null, options, request);
      }
      /// <summary>
      /// Lists all regulatory listings.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse> ListRegulatoryListingsAsync(global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListRegulatoryListingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists all regulatory listings.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse> ListRegulatoryListingsAsync(global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListRegulatoryListings, null, options, request);
      }
      /// <summary>
      /// Updates a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.RegulatoryListing UpdateRegulatoryListing(global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRegulatoryListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.RegulatoryListing UpdateRegulatoryListing(global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Updates a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> UpdateRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRegulatoryListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Updates a regulatory listing.
      ///
      /// The caller must have `numbering.regulatoryListings.update` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.RegulatoryListing> UpdateRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Deletes a regulatory listing. Regulatory listings that are associated with
      /// an active phone number instance cannot be deleted.
      ///
      /// The caller must have `numbering.regulatoryListings.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRegulatoryListing(global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRegulatoryListing(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a regulatory listing. Regulatory listings that are associated with
      /// an active phone number instance cannot be deleted.
      ///
      /// The caller must have `numbering.regulatoryListings.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteRegulatoryListing(global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Deletes a regulatory listing. Regulatory listings that are associated with
      /// an active phone number instance cannot be deleted.
      ///
      /// The caller must have `numbering.regulatoryListings.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRegulatoryListingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a regulatory listing. Regulatory listings that are associated with
      /// an active phone number instance cannot be deleted.
      ///
      /// The caller must have `numbering.regulatoryListings.delete` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteRegulatoryListingAsync(global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRegulatoryListing, null, options, request);
      }
      /// <summary>
      /// Searches all usable regulatory listings with the specified number type.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse SearchRegulatoryListings(global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchRegulatoryListings(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches all usable regulatory listings with the specified number type.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse SearchRegulatoryListings(global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SearchRegulatoryListings, null, options, request);
      }
      /// <summary>
      /// Searches all usable regulatory listings with the specified number type.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse> SearchRegulatoryListingsAsync(global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SearchRegulatoryListingsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Searches all usable regulatory listings with the specified number type.
      ///
      /// List returns regulatory listings sorted by `create_time` descending.
      ///
      /// The caller must have `numbering.regulatoryListings.list` permission on the project.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse> SearchRegulatoryListingsAsync(global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SearchRegulatoryListings, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RegulatoryListingsClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RegulatoryListingsClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegulatoryListingsBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateRegulatoryListing, serviceImpl.CreateRegulatoryListing)
          .AddMethod(__Method_GetRegulatoryListing, serviceImpl.GetRegulatoryListing)
          .AddMethod(__Method_ListRegulatoryListings, serviceImpl.ListRegulatoryListings)
          .AddMethod(__Method_UpdateRegulatoryListing, serviceImpl.UpdateRegulatoryListing)
          .AddMethod(__Method_DeleteRegulatoryListing, serviceImpl.DeleteRegulatoryListing)
          .AddMethod(__Method_SearchRegulatoryListings, serviceImpl.SearchRegulatoryListings).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegulatoryListingsBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateRegulatoryListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Numbering.V1Beta1.CreateRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing>(serviceImpl.CreateRegulatoryListing));
      serviceBinder.AddMethod(__Method_GetRegulatoryListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Numbering.V1Beta1.GetRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing>(serviceImpl.GetRegulatoryListing));
      serviceBinder.AddMethod(__Method_ListRegulatoryListings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsRequest, global::Enfonica.Numbering.V1Beta1.ListRegulatoryListingsResponse>(serviceImpl.ListRegulatoryListings));
      serviceBinder.AddMethod(__Method_UpdateRegulatoryListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Numbering.V1Beta1.UpdateRegulatoryListingRequest, global::Enfonica.Numbering.V1Beta1.RegulatoryListing>(serviceImpl.UpdateRegulatoryListing));
      serviceBinder.AddMethod(__Method_DeleteRegulatoryListing, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Numbering.V1Beta1.DeleteRegulatoryListingRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.DeleteRegulatoryListing));
      serviceBinder.AddMethod(__Method_SearchRegulatoryListings, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsRequest, global::Enfonica.Numbering.V1Beta1.SearchRegulatoryListingsResponse>(serviceImpl.SearchRegulatoryListings));
    }

  }
}
#endregion
